import streamlit as st
import pandas as pd
import plotly.express as px
import numpy as np

# Set Streamlit page configuration
st.set_page_config(
    page_title="Fashion Audience Segmentation Dashboard",
    layout="wide",
    initial_sidebar_state="expanded"
)

# --- 1. Mock Data Generation Function ---
# This mirrors the logic from the HTML file to create sample data
@st.cache_data
def generate_mock_data():
    """Generates a synthetic dataset for fashion sales segmented by city tier."""
    np.random.seed(42)  # for reproducibility
    tiers = ['Tier 1', 'Tier 2', 'Tier 3']
    categories = [
        {'name': 'Dresses', 'T1_ratio': 0.25, 'T2_ratio': 0.15, 'T3_ratio': 0.10, 'price': 85},
        {'name': 'T-Shirts', 'T1_ratio': 0.10, 'T2_ratio': 0.30, 'T3_ratio': 0.40, 'price': 25},
        {'name': 'Jeans', 'T1_ratio': 0.20, 'T2_ratio': 0.20, 'T3_ratio': 0.15, 'price': 60},
        {'name': 'Accessories', 'T1_ratio': 0.15, 'T2_ratio': 0.10, 'T3_ratio': 0.10, 'price': 30},
        {'name': 'Outerwear', 'T1_ratio': 0.30, 'T2_ratio': 0.25, 'T3_ratio': 0.25, 'price': 120}
    ]
    base_sales = {
        'Tier 1': 350000,
        'Tier 2': 250000,
        'Tier 3': 180000
    }

    data = []
    for tier in tiers:
        tier_num = tier.split(' ')[1]
        for cat in categories:
            sales_ratio = cat[f'T{tier_num}_ratio']
            # Add variance to sales
            sales = base_sales[tier] * sales_ratio * (1 + (np.random.rand() - 0.5) * 0.2)
            
            # Add variance to price
            avg_price = cat['price'] * (1 + (np.random.rand() - 0.5) * 0.1)
            
            count = sales / avg_price # Calculate count based on Sales and Avg Price
            
            data.append({
                'Tier': tier,
                'Category': cat['name'],
                'Sales': sales,
                'Count': count,
                'Avg_Price': avg_price
            })

    df = pd.DataFrame(data)
    return df

# Load the data
df = generate_mock_data()

# --- 2. Dashboard Title and Description ---
st.title("üõçÔ∏è Fashion Audience Segmentation Dashboard")
st.markdown("Analyze **Sales** and **Product Mix** across **City Tiers** to define your target market strategy.")
st.markdown("---")

# --- 3. Sidebar (Tier Selector) ---
st.sidebar.header("üéØ Select Audience Tier")
selected_tier = st.sidebar.selectbox(
    "Select a tier for granular analysis:",
    options=['Tier 1', 'Tier 2', 'Tier 3'],
    index=0
)

# --- 4. Data Aggregation and Filtering ---

# Aggregate Total Tier Sales (for Chart 1)
df_tier_agg = df.groupby('Tier').agg(
    TotalSales=('Sales', 'sum'),
    TotalCount=('Count', 'sum')
).reset_index()
# Calculate overall average price for each tier
df_tier_agg['AvgPrice'] = df_tier_agg['TotalSales'] / df_tier_agg['TotalCount']


# Filter data for the selected tier (for KPIs and Chart 2)
df_selected_tier = df[df['Tier'] == selected_tier]

# Calculate KPIs for the selected tier
total_sales = df_selected_tier['Sales'].sum()
total_count = df_selected_tier['Count'].sum()
avg_price = df_selected_tier['Avg_Price'].mean() # Using the mean of item Avg_Prices for simplicity
top_category = df_selected_tier.groupby('Category')['Sales'].sum().idxmax()


# --- 5. KPI Metrics (Top Row) ---
col1, col2, col3 = st.columns(3)

with col1:
    st.metric(
        label=f"Total Sales ({selected_tier})",
        value=f"${total_sales:,.0f}",
        delta=None,
        help="Total revenue generated by the selected city tier."
    )

with col2:
    st.metric(
        label=f"Avg. Price Point ({selected_tier})",
        value=f"${avg_price:,.2f}",
        delta=None,
        help="Average selling price per unit in the selected city tier."
    )

with col3:
    st.metric(
        label=f"Top-Selling Category ({selected_tier})",
        value=top_category,
        delta=None,
        help="The product category contributing the highest sales value in the selected tier."
    )

st.markdown("---")

# --- 6. Visualizations (Bottom Row) ---
chart_col1, chart_col2 = st.columns(2)

# Chart 1: Sales Contribution by City Tier (Bar Chart)
with chart_col1:
    st.subheader("Sales Contribution by City Tier")
    
    fig_bar = px.bar(
        df_tier_agg,
        x='Tier',
        y='TotalSales',
        color='Tier',
        title="Revenue Breakdown Across All Tiers",
        labels={'TotalSales': 'Total Sales Value ($)', 'Tier': 'City Tier'},
        color_discrete_map={
            'Tier 1': '#4F46E5',  # Indigo
            'Tier 2': '#10B981',  # Emerald
            'Tier 3': '#F59E0B'   # Amber
        }
    )
    fig_bar.update_layout(showlegend=False, xaxis={'categoryorder':'total descending'})
    fig_bar.update_traces(marker_line_width=0, texttemplate='%{y:$.2s}', textposition='outside')
    st.plotly_chart(fig_bar, use_container_width=True)

# Chart 2: Product Mix for Selected Tier (Pie Chart)
with chart_col2:
    st.subheader(f"Product Mix: {selected_tier} (By Sales Value)")
    
    # Aggregate category sales for the pie chart
    df_category_mix = df_selected_tier.groupby('Category')['Sales'].sum().reset_index()
    df_category_mix.columns = ['Category', 'Sales']

    fig_pie = px.pie(
        df_category_mix,
        values='Sales',
        names='Category',
        title=f"Category Breakdown in {selected_tier}",
        hole=.3, # Creates a donut chart
        color_discrete_sequence=px.colors.qualitative.D3 # Use a standard, diverse color sequence
    )
    fig_pie.update_traces(textposition='inside', textinfo='percent+label', marker=dict(line=dict(color='#000000', width=1)))
    st.plotly_chart(fig_pie, use_container_width=True)

# --- End of Dashboard ---
